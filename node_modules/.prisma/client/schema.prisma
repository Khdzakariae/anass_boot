// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  firstName    String
  lastName     String
  name         String
  email        String          @unique
  password     String
  verified     Boolean         @default(false)
  ausbildungen Ausbildung[] // One-to-many relation
  campaigns    EmailCampaign[]
  documents    Document[]
}

model Ausbildung {
  id                   String  @id @default(cuid())
  title                String
  institution          String
  location             String  @default("N/A")
  startDate            String  @default("N/A") @map("start_date")
  vacancies            String  @default("N/A")
  phones               String
  url                  String // Remove @unique to allow same URL for different users
  description          String  @default("N/A")
  emails               String
  motivationLetterPath String? @map("motivation_letter_path")
  userId               String // Make required (not optional)
  status               String  @default("Pending")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Changed to Cascade

  // Add compound unique constraint to allow same URL for different users
  @@unique([url, userId])
  @@map("ausbildung")
}

model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  userId      String
  sendType    String    @default("all")
  jobIds      String? // Single job ID
  documentIds String? // Single document ID
  totalEmails Int       @default(0)
  sentCount   Int       @default(0)
  errorCount  Int       @default(0)
  status      String    @default("created") // created, sending, completed, completed_with_errors, failed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_campaigns")
}

model Document {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}
